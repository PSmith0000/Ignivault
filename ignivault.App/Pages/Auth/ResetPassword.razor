@page "/auth/reset-password"
@layout LoginLayout
@inject IAuthApiClient AuthApiClient
@inject NavigationManager Navigation

<PageTitle>Reset Password</PageTitle>

<SfCard Style="width: 400px;">
    <CardHeader Title="Reset Your Password"></CardHeader>
    <CardContent>
        @if (MessageBad)
        {
            <div class="alert alert-danger mt-3" role="alert">
                @errorMessage
            </div>
        }

        @if (MessageOK)
        {
            <div class="alert alert-success mt-3" role="alert">
                Password reset successful. You can now login.
                <div class="d-flex justify-content-end">
                    <a href="/auth/login">Account Login</a>
                </div>
            </div>

            @RedirectToLogin();
        }
        else
        {
            @if (resetValid)
            {
                <EditForm Model="forgotPasswordModel" OnValidSubmit="HandleResetPasswordAsync">
                    <DataAnnotationsValidator />

                    <div class="form-group mb-4">
                        <SfTextBox @bind-Value="forgotPasswordModel.Email"
                                   Placeholder="Email"
                                   FloatLabelType="FloatLabelType.Auto"
                                   Type="InputType.Email" Readonly="true"></SfTextBox>
                    </div>
                    <div class="form-group mb-4">
                        <SfTextBox @bind-Value="forgotPasswordModel.Password"
                                   Placeholder="Password"
                                   FloatLabelType="FloatLabelType.Auto"
                                   Type="InputType.Password"></SfTextBox>
                    </div>
                    <div class="form-group mb-3">
                        <SfTextBox @bind-Value="forgotPasswordModel.ConfirmPassword"
                                   Placeholder="Confirm Password"
                                   FloatLabelType="FloatLabelType.Auto"
                                   Type="InputType.Password"></SfTextBox>
                    </div>

                    <ValidationSummary />

                    <div class="mt-4">
                        <SfButton type="submit" IsPrimary="true" Disabled="@isLoading" Content="@(isLoading ? "" : "Password Reset")">
                            @if (isLoading)
                            {
                                <div class="d-flex align-items-center">
                                    <SfSpinner Visible="true" Size="20" Type="SpinnerType.Tailwind3"></SfSpinner>
                                    <span class="ms-2">Resetting Password...</span>
                                </div>
                            }
                        </SfButton>
                    </div>
                </EditForm>
            }
            else
            {
                <div class="alert alert-danger mt-3" role="alert">
                    Invalid Reset Link.
                </div>
            }
        }

    </CardContent>
    <CardFooter>
        <div class="d-flex justify-content-end">
            <a href="/auth/login">Remember your password?</a>
        </div>
    </CardFooter>
</SfCard>

@code {
    private readonly ResetPasswordRequestDto forgotPasswordModel = new();
    private bool isLoading = false;
    private bool resetValid = false;
    private string errorMessage = "Error occured during password reset.";
    private string OkMessage = "Password reset complete, You can now login.";
    private bool MessageOK = false;
    private bool MessageBad = false;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        forgotPasswordModel.Email = query.Get("email") ?? string.Empty;
        forgotPasswordModel.Token = query.Get("token") ?? string.Empty;

        if(!string.IsNullOrEmpty(forgotPasswordModel.Email) && !string.IsNullOrEmpty(forgotPasswordModel.Token))
        {
            resetValid = true;
        }
        else
        {
            errorMessage = "Password reset link is invalid.";
        }
    }

    private async Task HandleResetPasswordAsync()
    {
        isLoading = true;

        var result = await AuthApiClient.ResetPasswordAsync(forgotPasswordModel);

        if (result.IsSuccess)
        {
            OkMessage = result.Message;
            MessageOK = true;
        }
        else
        {
            errorMessage = result.Message;
            MessageBad = true;
        }
        
        isLoading = false;
    }

    private Task RedirectToLogin() {
    {
        Task.Delay(2000);
        Navigation.NavigateTo("/auth/login");
        return Task.CompletedTask;
    }
}
}